'use client';

import { useState, useEffect } from 'react';
import Calendar from 'react-calendar';
import 'react-calendar/dist/Calendar.css';
import { getEmployeeByID } from '@/services/employeeService';
import { getEmployeeTaskAssignments, TaskAssignment } from '@/services/taskAssignService';
import { RecheckPopup } from '@/components/RecheckPopup';
import { LeavePopup } from '@/components/LeavePopup';
import { TimeSelector } from '@/components/TimeSelector';

type ValuePiece = Date | null;
type Value = ValuePiece | [ValuePiece, ValuePiece];

export default function DailyReport() {
  // ... (ส่วนอื่นๆ คงเดิม) ...

  return (
    <div className="container-fluid mx-auto p-4">
      <div className="flex gap-4">
        {/* ... (ส่วน Calendar คงเดิม) ... */}
        
        {/* Right side - Form */}
        <div className="flex-1">
          <div className="bg-white rounded-lg shadow-lg p-4">
            {/* ... (ส่วน header คงเดิม) ... */}

            {/* Table */}
            <div className="overflow-x-auto">
              <table className="w-full border-collapse">
                <thead>
                  <tr className="bg-gray-100">
                    <th className="border p-2 text-left w-12">No</th>
                    <th className="border p-2 text-left w-1/4">Relate Drawing</th>
                    <th className="border p-2 text-left w-64">เวลาทำงาน</th>
                    <th className="border p-2 text-left w-40">Progress</th>
                    <th className="border p-2 text-left w-1/4">Note</th>
                    <th className="border p-2 text-left w-40">Upload File</th>
                    <th className="border p-2 text-left w-16">Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {taskAssignments.map((assignment, index) => (
                    <tr key={assignment.id}>
                      <td className="border p-2">{index + 1}</td>
                      <td className="border p-2">
                        <input
                          type="text"
                          value={assignment.relateDrawing || ''}
                          onChange={(e) => handleUpdateTask(assignment.id, { relateDrawing: e.target.value })}
                          className="border rounded p-1 w-full"
                          placeholder="ใส่ชื่องาน"
                        />
                      </td>
                      <td className="border p-2">
                        <div className="flex items-center gap-2">
                          <select
                            value={assignment.timeType || 'normal'}
                            onChange={(e) => {
                              const newTimeType = e.target.value as TaskAssignment['timeType'];
                              if (newTimeType === 'leave') {
                                handleUpdateTask(assignment.id, {
                                  timeType: newTimeType,
                                  relateDrawing: 'ลา',
                                  workingHours: '-'
                                });
                                setCurrentTaskId(assignment.id);
                                setShowLeavePopup(true);
                              } else {
                                handleUpdateTask(assignment.id, { 
                                  timeType: newTimeType,
                                  workingHours: '',
                                  leaveData: undefined,
                                  relateDrawing: ''
                                });
                              }
                            }}
                            className={`rounded p-1 w-32 ${
                              assignment.timeType === 'ot' ? 'bg-blue-50 text-blue-600' :
                              assignment.timeType === 'leave' ? 'bg-red-50 text-red-600' :
                              'bg-green-50 text-green-600'
                            }`}
                          >
                            <option value="normal">เวลาปกติ</option>
                            <option value="ot">เวลาโอที</option>
                            <option value="leave">ลา</option>
                          </select>
                          {assignment.timeType !== 'leave' && (
                            <TimeSelector
                              regularValue={assignment.timeType === 'normal' ? (assignment.workingHours || '') : ''}
                              otValue={assignment.timeType === 'ot' ? (assignment.workingHours || '') : ''}
                              onRegularChange={(value) => {
                                if (assignment.timeType === 'normal') {
                                  handleUpdateTask(assignment.id, { workingHours: value });
                                }
                              }}
                              onOtChange={(value) => {
                                if (assignment.timeType === 'ot') {
                                  handleUpdateTask(assignment.id, { workingHours: value });
                                }
                              }}
                            />
                          )}
                          {assignment.timeType === 'leave' && (
                            <span className="text-red-500">-</span>
                          )}
                        </div>
                      </td>
                      {/* ... (ส่วนอื่นๆ คงเดิม) ... */}
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
            
            {/* ... (ส่วนปุ่มด้านล่างคงเดิม) ... */}
          </div>
        </div>
      </div>
      
      {/* ... (ส่วน Popup คงเดิม) ... */}
    </div>
  );
}