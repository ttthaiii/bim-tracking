'use client';

import React, { createContext, useContext, useCallback, useRef, useMemo, ReactNode } from 'react';

// ‚úÖ ‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏´‡∏°‡πà
interface CacheEntry<T> {
  data: T;
  timestamp: number;
  ttl?: number; // Time to live in milliseconds (optional)
}

// ‚úÖ ‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏´‡∏°‡πà
interface FirestoreCacheContextType {
  getCache: <T>(key: string) => T | null;
  setCache: <T>(key: string, data: T, ttl?: number) => void;
  invalidateCache: (key?: string) => void;
  invalidateAll: () => void;
  hasCache: (key: string) => boolean;
}

const FirestoreCacheContext = createContext<FirestoreCacheContextType | undefined>(undefined);

interface FirestoreCacheProviderProps {
  children: ReactNode;
}

// ‚úÖ ‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏´‡∏°‡πà
export function FirestoreCacheProvider({ children }: FirestoreCacheProviderProps) {
  // ‚úÖ ‡πÉ‡∏ä‡πâ useRef ‡πÅ‡∏ó‡∏ô useState ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Re-render
  const cacheRef = useRef<Map<string, CacheEntry<any>>>(new Map());

// ‚úÖ ‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏´‡∏°‡πà
  const getCache = useCallback(<T,>(key: string): T | null => {
    const entry = cacheRef.current.get(key);
    
    if (!entry) {
      return null;
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö TTL (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    if (entry.ttl && Date.now() - entry.timestamp > entry.ttl) {
      console.log(`üóëÔ∏è Cache EXPIRED: ${key}`);
      cacheRef.current.delete(key);
      return null;
    }

    console.log(`‚úÖ Cache HIT: ${key}`);
    return entry.data as T;
  }, []); // ‚¨ÖÔ∏è Empty deps = Never recreate

// ‚úÖ ‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏´‡∏°‡πà
  const setCache = useCallback(<T,>(key: string, data: T, ttl?: number) => {
    console.log(`üíæ Cache SET: ${key}${ttl ? ` (TTL: ${ttl}ms)` : ''}`);
    cacheRef.current.set(key, {
      data,
      timestamp: Date.now(),
      ttl
    });
  }, []);

// ‚úÖ ‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏´‡∏°‡πà
  const invalidateCache = useCallback((key?: string) => {
    if (key) {
      console.log(`üóëÔ∏è Cache INVALIDATE: ${key}`);
      cacheRef.current.delete(key);
    }
  }, []);

// ‚úÖ ‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏´‡∏°‡πà
  const invalidateAll = useCallback(() => {
    console.log('üóëÔ∏è Cache INVALIDATE ALL');
    cacheRef.current.clear();
  }, []);

  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
  const hasCache = useCallback((key: string): boolean => {
    return cacheRef.current.has(key);
  }, []);

// ‚úÖ ‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏´‡∏°‡πà
  // ‚úÖ ‡πÉ‡∏ä‡πâ useMemo ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ value object stable
  const value = useMemo(
    () => ({
      getCache,
      setCache,
      invalidateCache,
      invalidateAll,
      hasCache
    }),
    [getCache, setCache, invalidateCache, invalidateAll, hasCache]
  );

  return (
    <FirestoreCacheContext.Provider value={value}>
      {children}
    </FirestoreCacheContext.Provider>
  );
}

export function useFirestoreCache() {
  const context = useContext(FirestoreCacheContext);
  if (!context) {
    throw new Error('useFirestoreCache must be used within FirestoreCacheProvider');
  }
  return context;
}